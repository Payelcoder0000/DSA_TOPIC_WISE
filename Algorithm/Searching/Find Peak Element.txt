A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

Solution:


class Solution {
    public int findPeakElement(int[] arr) {
        
        int n = arr.length;
        int l = 0;
        int r = arr.length-1;
        int mid = 0;
        while (l <= r)
        {

          // finding mid by binary right shifting.
          mid = l+(r - l)/2;

          // first case if mid is the answer
          if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&
               (mid == n - 1 || arr[mid + 1] <= arr[mid])
              )
            break;

          // if we have to perform left recursion
          if (mid > 0 && arr[mid - 1] > arr[mid])
            r = mid - 1;

          // else right recursion.
          else
            l = mid + 1;
        }
        return mid;
        
    }
}

============================

class Solution {
    public int findPeakElement(int[] nums) {
        
        int l = 0, r = nums.length - 1;
        while (l < r) {
            
            int mid = (l + r) / 2;
            
            if (nums[mid] > nums[mid + 1])
                r = mid;
            else
                l = mid + 1;
        }
        return l;
        
    }
}