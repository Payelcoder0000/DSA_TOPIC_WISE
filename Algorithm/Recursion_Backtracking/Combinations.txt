Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
Example 2:

Input: n = 1, k = 1
Output: [[1]]


Solution:

class Solution {
    
    public static List<List<Integer>> ansList = new ArrayList();
    public static void sequences(Integer k,Integer curr,Integer n,List<Integer> ans){
        if(ans.size() == k){
            // Created new list as ans would be keeping its reference and would change element in ansList;
            List<Integer> list = new ArrayList<>(ans);
            ansList.add(list);
            return;
        }
        
        for(int i=curr;i<=n;i++){
            //Backtracking part : next 3 lines.
            ans.add(i);
            
            sequences(k,i+1,n,ans);
            
            ans.remove(ans.size()-1);
        
        }
        
        
    }
    public List<List<Integer>> combine(int n, int k) {
        ansList = new ArrayList<>();
        sequences(k,1,n,new ArrayList<>());
        return ansList;
    }
}