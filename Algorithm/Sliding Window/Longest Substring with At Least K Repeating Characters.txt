Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

 

Example 1:

Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.


Solution:

Divide and Conquer:

public int longestSubstring(String s, int k) {
        
        return longestSubString(s,0,s.length(),k);
    }
    
    int longestSubString(String s, int start, int end, int k){
        
        int left, right;
 
        // Array for counting the number of
        // times each character repeats
        // count the number of times each
        // character repeats from start to end
        int count[] = new int[26];

        // Store the frequency from s[start...end]
        for(int i = start; i < end; i++)
        {
            count[s.charAt(i) - 'a'] += 1;
        }

        // Iterate from [start, end]
        for(int i = start; i < end; i++)
        {
            if (count[s.charAt(i) - 'a'] < k)
            {

                // Recursive call for left subpart
                left = longestSubString(s,start, i, k);

                // Recursive call for right subpart
                right = longestSubString(s, i + 1, end, k);

                // Return maximum of left & right
                return Math.max(left, right);
            }
        }
        
        // If all the characters are repeated
        // at least k times
        return end - start;
    }

Time Complexity: O(N*log2N)


====================================


class Solution {
    public int longestSubstring(String s, int k) {
        
        return helper(s.toCharArray(),0,s.length(),k);
        
    }
    
    int helper(char[] ch, int start, int end, int k){
        if(end-start<k)
            return 0;
        
        int[] count = new int[26];
        for(int i=start;i<end;i++){
            count[ch[i]-'a']++;
        }
        
        for(int i=start;i<end;i++){
            if(count[ch[i]-'a']<k){
                int j=i+1;
                
                while(j<end && count[ch[j]-'a']<k)
                    j++;
            
                return Math.max(helper(ch, start, i, k), helper(ch,j,end,k));
            }
        }
        
        return end-start;
    }
}