Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

You must find a solution with a memory complexity better than O(n2).

 

Example 1:

Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13
Example 2:

Input: matrix = [[-5]], k = 1
Output: -5


Solution:

class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        
        int m = matrix.length, n = matrix[0].length;
        int low = matrix[0][0], high = matrix[m - 1][n - 1];
        while (low < high) {
            int mid = (high - low) / 2 + low;
            int count = 0; 
            for (int i = 0; i < m; i++) {
                for(int j=0;j<n;j++){
                    if (matrix[i][j] > mid){
                        break;
                    } 
                    
                    count++;
                }
            }
            if (count < k)
                low = mid + 1;
            else
                high = mid;
        }
        return low;
        
    }
}

For example, given a matrix and k = 8,
[[ 1, 5, 9],
[10, 11, 13],
[12, 13, 15]],

low = matrix[0][0] = 1, high = matrix[2][2] = 15, mid = 8, count is element number of set {1, 5} = 2, count < k, let low = mid + 1 = 9;
low = 9, high = 15, mid = 12, count is element number of set {1, 5, 9, 10, 11, 12} = 6, count < k, let low = mid + 1 = 13;
low = 13, high = 15, mid = 14, count is element number of set {1, 5, 9, 10, 11, 12, 13, 13} = 8, count = k, but the element we need is 13, not the mid(14), so let high = mid = 14 to narrow the search gap.
low = 13, high = 14, mid = 13, count = 8, count = k, let high = mid = 13,
low = 13, high = 13, low and high are meet, now return low.


https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/discuss/394294/Using-Binary-Search-in-Java-and-analysis

