Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1


Solution:

class Solution {
    public int firstMissingPositive(int[] arr) {
     
        int n= arr.length;
         for(int i = 0; i < n; i++)
        {

            // Loop to check boundary
            // condition and for swapping
            while (arr[i] >= 1 && arr[i] <= n
                    && arr[i] != arr[arr[i] - 1]) {

                int temp=arr[arr[i]-1];
                    arr[arr[i]-1]=arr[i];
                    arr[i]=temp;
            }
        }

        // Finding which index has value less than n
        for(int i = 0; i < n; i++)
            if (arr[i] != i + 1)
                return (i + 1);

        // If array has values from 1 to n
        return (n + 1);
    }
}

T.c = O(N), S.c = O(1)