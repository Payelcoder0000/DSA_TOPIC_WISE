A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Solution:

// Java program to find length
// of the shortest chain
// transformation from source
// to target
import java.util.*;

class GFG
{

// Returns length of shortest chain
// to reach 'target' from 'start'
// using minimum number of adjacent moves.
// D is dictionary
static int shortestChainLen(String start,
							String target,
							Set<String> D)
{

	if(start == target)
	return 0;
	// If the target String is not
	// present in the dictionary
	if (!D.contains(target))
		return 0;

	// To store the current chain length
	// and the length of the words
	int level = 0, wordlength = start.length();

	// Push the starting word into the queue
	Queue<String> Q = new LinkedList<>();
	Q.add(start);

	// While the queue is non-empty
	while (!Q.isEmpty())
	{

		// Increment the chain length
		++level;

		// Current size of the queue
		int sizeofQ = Q.size();

		// Since the queue is being updated while
		// it is being traversed so only the
		// elements which were already present
		// in the queue before the start of this
		// loop will be traversed for now
		for (int i = 0; i < sizeofQ; ++i)
		{

			// Remove the first word from the queue
			char []word = Q.peek().toCharArray();
			Q.remove();

			// For every character of the word
			for (int pos = 0; pos < wordlength; ++pos)
			{

				// Retain the original character
				// at the current position
				char orig_char = word[pos];

				// Replace the current character with
				// every possible lowercase alphabet
				for (char c = 'a'; c <= 'z'; ++c)
				{
					word[pos] = c;

					// If the new word is equal
					// to the target word
					if (String.valueOf(word).equals(target))
						return level + 1;

					// Remove the word from the set
					// if it is found in it
					if (!D.contains(String.valueOf(word)))
						continue;
					D.remove(String.valueOf(word));

					// And push the newly generated word
					// which will be a part of the chain
					Q.add(String.valueOf(word));
				}

				// Restore the original character
				// at the current position
				word[pos] = orig_char;
			}
		}
	}

	return 0;
}

// Driver code
public static void main(String[] args)
{
	// make dictionary
	Set<String> D = new HashSet<String>();
	D.add("poon");
	D.add("plee");
	D.add("same");
	D.add("poie");
	D.add("plie");
	D.add("poin");
	D.add("plea");
	String start = "toon";
	String target = "plea";
	System.out.print("Length of shortest chain is: "
		+ shortestChainLen(start, target, D));
}
}

Complexity Analysis: 

Time complexity: O(nÂ²m), where m is the number of entries originally in the dictionary and n is the size of the string. 
 
Auxiliary Space:O(m*n), where m are the strings are stored in queue. 
So the space Complexity is O(m*n).
