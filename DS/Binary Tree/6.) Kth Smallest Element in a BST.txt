Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Example 1:

Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public int kthSmallest(TreeNode root, int k) {
            Stack<TreeNode> stack = new Stack<TreeNode>();
            TreeNode node = root;
            int cnt = 0; 
            while(true){
                if(node != null){
                    stack.push(node);
                    node = node.left;
                }
                else{
                    if(stack.isEmpty()){
                        break;
                    }
                    node = stack.pop();
                    // inorder.add(node.val);
                    cnt++; 
                    if(cnt == k) return node.val; 
                    node = node.right;
                }
            }
            return -1; 
    }
}


T.C = O(N), S.C =O(1)
============================


class Solution {
    public int kthSmallest(TreeNode root, int k) {
        
        int nums[] = new int[2];
        inorder(root, nums, k);
        return nums[1];
    }
    
    public void inorder(TreeNode root, int[] nums, int k){
        if(root == null) return;
        inorder(root.left, nums, k);
        if(++nums[0] == k){
            nums[1] = root.val;
            return;
        }
        inorder(root.right, nums, k);
    }
}

T.C = O(N), S.C = O(N)