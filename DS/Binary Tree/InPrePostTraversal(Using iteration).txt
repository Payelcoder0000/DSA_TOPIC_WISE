Preorder
--------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> preorder = new ArrayList<>();
        if(root == null)
            return preorder;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            root = stack.pop();
            preorder.add(root.val);
            if(root.right != null)
                stack.push(root.right);
            if(root.left != null)
                stack.push(root.left);
        }
        return preorder;
    }

T.C = O(N), S.C = O(N)

--------------------

Inorder:

public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> inorder = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode node = root;
        
        while(true){
            if(node != null){
              stack.push(node);
              node = node.left;
            }
            else{
                if(stack.isEmpty())
                    break;
                node = stack.pop();
                inorder.add(node.val);
                node = node.right;
            }
        }
        
        return inorder;
    }

T.C = O(N), S.C = O(N)
------------------------------

Postorder:
public List<Integer> postorderTraversal(TreeNode root) {
        
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> postorder = new ArrayList<>();
        
        if(root == null)
            return postorder;
        
        TreeNode current = root;
        while(current != null || !stack.isEmpty()){
            if(current != null){
                stack.add(current);
                current = current.left;
            }else{
                TreeNode temp = stack.peek().right;
                if(temp == null){
                    temp = stack.pop();
                    postorder.add(temp.val);
                    while(!stack.isEmpty() && temp == stack.peek().right){
                        temp = stack.pop();
                        postorder.add(temp.val);
                    }
                }else
                    current = temp;
            }
        }
        
        return postorder;
        
    }

T.C: O(2N), S.C: O(N)